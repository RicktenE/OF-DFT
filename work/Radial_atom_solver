#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
Created on Mon Mar  2 09:27:19 2020

@author: H.R.A. ten Eikelder
program: OF-DFT radial atom solver using the FEniCS Python module. 
Description: This program takes as input the DFT equations and gives 
            as output the electron density of the material. In this case 
            the material is one atom. The atom will be simulated on the left 
            boundary and the 'infite space' will be simulated on the right 
            boundary. 
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
"""
from __future__ import print_function
import math

from fenics import *
from matplotlib import pyplot as plt

plt.close()
"""-------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------- 
                    Creating the mesh and defining trial and test functions
----------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------""" 
# Create mesh and define function space
mesh = UnitIntervalMesh(20) # Splits up the interval [0,1] in (n) elements 
V = FunctionSpace(mesh, 'P', 1) # P stands for lagrangian elemnts, number stands for degree

# Define trial and test functions
n = Function(V) # Function and not a Trial function due to nonlinearity
v = TestFunction(V)

"""-------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------- 
                    Defning external potential v[r] and Initial density n_1[r]
----------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------"""
#External potential v_e[r] is analytically described for atoms
#(Hydrogen = 1)
Ex = Expression('-Z/x[0]', Z=1.602E-16, degree=1)

#Initial density n_1[r]
n_i = Expression('a*exp(pow(((x[0])), 2))', degree=2, a=1/sqrt(2*pi))


"""-------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------- 
                    Creating and defining the boundary conditions
----------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------"""
#Defining the tolerance on the boundaries 
tol = 1E-14

#Defining the left boundary
def boundary_L(x, on_boundary):
    return on_boundary and near(x[0], 0, tol)

#Defining the right boundary
def boundary_R(x, on_boundary):
    return on_boundary and near(x[0], 1, tol)

#defining expression on left boundary
n_L = Expression('0', degree=2) 

#Define left boundary
bc_L = DirichletBC(V, n_L, boundary_L)  

#defining expression on right boundary
n_R = Expression('0', degree=1)

#Define right boundary
bc_R = DirichletBC(V, n_R, boundary_R) 

#collecting the left and right boundary in a list for the solver to read
bcs = [bc_L, bc_R] 


"""-------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
                    Defining and solving the variational problem
----------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------"""
#Thomas Fermi Energy Functional
C_kin = 3/10*pow((3*pow(math.pi, 2)),(2/3))
TF_KE = C_kin*pow(n,(5/3))
#Thomas Fermi Energy functional derived towards n 
TF_KE_der = 0.5*pow((3*pow(math.pi, 2)),(2/3))*pow(n,(3/2))

#integral form coulomb potential
    #### n_1 = Expression('n+tol')
    #### Cp = Expression('(n*n_1)/tol', degree =1) # dividing by x[0] of n and x[0] of n_1 is not possible. 
Cp_der = 4*math.pi*n

#integral form external potential term
Ex_i = Ex*n
#integral form external potential term derived towards n
Ex_der = Ex

#Defining variational problem 
E = Ex_der*v*dx + Cp_der*dx + TF_KE_der*dx 
a, L = lhs(E), rhs(E)

# Compute solution
n = Function(V)
solve(a == L, n, bcs)

"""-------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
                    Saving VTKfile for post processing in ParaView
----------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------"""
# Save solution to file in VTK format
vtkfile = File('VTKfiles/radial_atom_solver.pvd')
vtkfile << n

"""-------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------- 
                    Computing the error 
----------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------"""
# There is no analytical solution to check the error

"""-------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
                    Plot solution and mesh
----------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------"""
plt.figure()
plot(n)
plot(mesh)

# show the plots
plt.show()