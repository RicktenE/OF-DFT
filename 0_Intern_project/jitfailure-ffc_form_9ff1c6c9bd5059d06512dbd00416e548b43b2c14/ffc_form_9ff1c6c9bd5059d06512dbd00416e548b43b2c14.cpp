// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.post0.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   False
//  format:                         'ufc'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  no-evaluate_basis_derivatives:  True
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#include "ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14.h"

// Based on https://gcc.gnu.org/wiki/Visibility
#if defined _WIN32 || defined __CYGWIN__
    #ifdef __GNUC__
        #define DLL_EXPORT __attribute__ ((dllexport))
    #else
        #define DLL_EXPORT __declspec(dllexport)
    #endif
#else
    #define DLL_EXPORT __attribute__ ((visibility ("default")))
#endif

ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_cell_integral_main_otherwise::ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_cell_integral_main_otherwise() : ufc::cell_integral()
{

}

ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_cell_integral_main_otherwise::~ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_cell_integral_main_otherwise()
{

}

const std::vector<bool> & ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_cell_integral_main_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true, true});
return enabled;
}

void ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_cell_integral_main_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 2
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           2
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights2[2] = { 0.5, 0.5 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE2_C0_D1_Q2[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE2_C0_Q2[1][2][2] =
        { { { 0.7886751345948129, 0.2113248654051871 },
            { 0.2113248654051871, 0.7886751345948129 } } };
    // Unstructured piecewise computations
    double w0_d0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0 += w[0][ic] * FE2_C0_D1_Q2[0][0][ic];
    const double J_c0 = coordinate_dofs[0] * FE2_C0_D1_Q2[0][0][0] + coordinate_dofs[1] * FE2_C0_D1_Q2[0][0][1];
    double w1_d0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0 += w[1][ic] * FE2_C0_D1_Q2[0][0][ic];
    const double J_c0 = coordinate_dofs[0] * FE2_C0_D1_Q2[0][0][0] + coordinate_dofs[1] * FE2_C0_D1_Q2[0][0][1];
    alignas(32) double sp[4];
    sp[0] = w0_d0 * (1.0 / J_c0);
    sp[1] = w1_d0 * (1.0 / J_c0);
    sp[2] = sp[0] * sp[1];
    sp[3] = std::abs(J_c0);
    alignas(32) double BF0 = {};
    for (int iq = 0; iq < 2; ++iq)
    {
        // Quadrature loop body setup (num_points=2)
        // Unstructured varying computations for num_points=2
        const double x_c0 = coordinate_dofs[0] * FE2_C0_Q2[0][iq][0] + coordinate_dofs[1] * FE2_C0_Q2[0][iq][1];
        double w0 = 0.0;
        for (int ic = 0; ic < 2; ++ic)
            w0 += w[0][ic] * FE2_C0_Q2[0][iq][ic];
        double w1 = 0.0;
        for (int ic = 0; ic < 2; ++ic)
            w1 += w[1][ic] * FE2_C0_Q2[0][iq][ic];
        alignas(32) double sv2[4];
        sv2[0] = -1 * (-1 / x_c0) + -1 * w0;
        sv2[1] = 1.200421754876142 * sv2[0] * w1;
        sv2[2] = sp[2] + -1 * sv2[1];
        sv2[3] = sv2[2] * sp[3];
        const double fw0 = sv2[3] * weights2[iq];
        BF0 += fw0;
    }
    A[0] = 0.0;
    A[0] += BF0;
}

extern "C" DLL_EXPORT ufc::cell_integral * create_ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_cell_integral_main_otherwise()
{
  return new ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_cell_integral_main_otherwise();
}


ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main() : ufc::form()
{
    // Do nothing
}

ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::~ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main()
{
    // Do nothing
}

const char * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::signature() const
{
    return "810409c42ff20a4ac57489a9ca185169a5840146b9016f36986142d0fa0a8b74083ba95187939cfc4387fe723294a44503eaf912f3ec05ca94cd13db2fd81eef";
}

std::size_t ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::rank() const
{
    return 0;
}

std::size_t ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::num_coefficients() const
{
    return 2;
}

std::size_t ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::original_coefficient_position(std::size_t i) const
{
    if (i >= 2)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1};
    return position[i];
}

ufc::finite_element * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_coordinate_finite_element() const
{
    return create_ffc_element_503d4504b4e9efdc87df66a648eb55f8e9c5deba_finite_element_main();
}

ufc::dofmap * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_coordinate_dofmap() const
{
    return create_ffc_element_503d4504b4e9efdc87df66a648eb55f8e9c5deba_dofmap_main();
}

ufc::coordinate_mapping * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_coordinate_mapping() const
{
    return create_ffc_coordinate_mapping_1bd8439bafcad146c2733bc36ad25c478956c6bf_coordinate_mapping_main();
}

ufc::finite_element * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_4eeab30ccd9f23cfa622d3969d0ba295e5837e67_finite_element_main();
    case 1:
        return create_ffc_element_4eeab30ccd9f23cfa622d3969d0ba295e5837e67_finite_element_main();
    default:
        return nullptr;
    }
}

ufc::dofmap * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_4eeab30ccd9f23cfa622d3969d0ba295e5837e67_dofmap_main();
    case 1:
        return create_ffc_element_4eeab30ccd9f23cfa622d3969d0ba295e5837e67_dofmap_main();
    default:
        return nullptr;
    }
}

std::size_t ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::max_overlap_subdomain_id() const
{
    return 0;
}

bool ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::has_cell_integrals() const
{
    return true;
}

bool ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::has_exterior_facet_integrals() const
{
    return false;
}

bool ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::has_interior_facet_integrals() const
{
    return false;
}

bool ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::has_vertex_integrals() const
{
    return false;
}

bool ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::has_custom_integrals() const
{
    return false;
}

bool ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::has_cutcell_integrals() const
{
    return false;
}

bool ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::has_interface_integrals() const
{
    return false;
}

bool ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_default_cell_integral() const
{
    return create_ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_cell_integral_main_otherwise();
}

ufc::exterior_facet_integral * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main::create_default_overlap_integral() const
{
    return nullptr;
}

extern "C" DLL_EXPORT ufc::form * create_ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main()
{
  return new ffc_form_9ff1c6c9bd5059d06512dbd00416e548b43b2c14_form_main();
}

