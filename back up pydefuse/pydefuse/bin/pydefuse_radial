#!/usr/bin/env python3
# 
#    PyDeFuSE
#    Copyright (C) 2015 Rickard Armiento
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys, argparse, time
import numpy

periodic_table = {'H': 1, 'He': 2, 'Li': 3, 'Be': 4, 'B': 5, 'C': 6, 'N': 7, 'O': 8, 'F': 9, 'Ne': 10, 'Na': 11, 'Mg': 12, 'Al': 13, 'Si': 14, 'P': 15, 'S': 16, 'Cl': 17, 'Ar': 18,
           'K': 19, 'Ca': 20, 'Sc': 21, 'Ti': 22, 'V': 23, 'Cr': 24, 'Mn': 25, 'Fe': 26, 'Co': 27, 'Ni': 28, 'Cu': 29, 'Zn': 30, 'Ga': 31, 'Ge': 32, 'As': 33, 'Se': 34,
           'Br': 35, 'Kr': 36, 'Rb': 37, 'Sr': 38, 'Y': 39, 'Zr': 40, 'Nb': 41, 'Mo': 42, 'Tc': 43, 'Ru': 44, 'Rh': 45, 'Pd': 46, 'Ag': 47, 'Cd': 48, 'In': 49, 'Sn': 50,
           'Sb': 51, 'Te': 52, 'I': 53, 'Xe': 54, 'Cs': 55, 'Ba': 56, 'La': 57, 'Ce': 58, 'Pr': 59, 'Nd': 60, 'Pm': 61, 'Sm': 62, 'Eu': 63, 'Gd': 64, 'Tb': 65, 'Dy': 66,
           'Ho': 67, 'Er': 68, 'Tm': 69, 'Yb': 70, 'Lu': 71, 'Hf': 72, 'Ta': 73, 'W': 74, 'Re': 75, 'Os': 76, 'Ir': 77, 'Pt': 78, 'Au': 79, 'Hg': 80, 'Tl': 81, 'Pb': 82,
           'Bi': 83, 'Po': 84, 'At': 85, 'Rn': 86, 'Fr': 87, 'Ra': 88, 'Ac': 89, 'Th': 90, 'Pa': 91, 'U': 92, 'Np': 93, 'Pu': 94, 'Am': 95, 'Cm': 96, 'Bk': 97, 'Cf': 98,
           'Es': 99, 'Fm': 100, 'Md': 101, 'No': 102, 'Lr': 103, 'Rf': 104, 'Db': 105, 'Sg': 106, 'Bh': 107, 'Hs': 108, 'Mt': 109, 'Ds': 110, 'Rg': 111, 'Cn': 112,
           'Uut': 113, 'Uuq': 114, 'Uup': 115, 'Uuh': 116, 'Uus': 117, 'Uuo': 118}

try:
    import ConfigParser as configparser
except Exception:
    import configparser

try:    
    import pydefuse
except Exception:
    import inspect
    PATH_TO_PYDEFUSE = os.path.dirname(os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))))
    sys.path.insert(1, os.path.expanduser(PATH_TO_PYDEFUSE))
    import pydefuse

def main():
    parser = argparse.ArgumentParser(description="PyDeFuSE")
    parser.add_argument('-debug', action='store_true')
    parser.add_argument('file', metavar='run', nargs='*', help='input file')
    args = parser.parse_args()    

    if len(args.file) == 0:
        files = ["defuse.in"]
    else:
        files=args.file

    print ("=====================================================================")
    print ("======== PyDeFuSE starts",time.strftime("%c"))
    print ("=====================================================================")    
                
    for f in files:
        config = configparser.SafeConfigParser()
        try:
            config.readfp(open(f))
        except TypeError:
            raise
            print ("Could not read input file", f, "(incorrect format?)")
            continue
        except Exception as e:
            print ("Could not read input file", f, "(file missing?)")
            continue        
        #unitcell = numpy.array([[5.0, 0.0, 0.0], [0.0,5.0,0.0], [0.0,0.0,5.0]])
        if 'defuse' not in config.sections():
            print ("Input file",f,"is missing the [defuse] section.")
            continue
        data = {'scale':1.0, 'N':None, 'pbc':[True, True, True], 'print_timings':False}        
        data.update(dict(config.items('defuse')))
        unitcell = numpy.array(eval(data['unitcell'],{},{}))
        scale = float(data['scale'])
        unitcell = unitcell*scale
        functionals = eval(data['functionals'],{},{'tf':pydefuse.func_tf, 'd':pydefuse.func_dirac, 'w':pydefuse.func_weizsacker})
        atoms = eval(data['atoms'],{},periodic_table)
        coords = numpy.array(eval(data['coords'],{},{}))
        N = data['N']
        if N is not None:
            N = int(N)
        pbc = eval(data['pbc'],{},{})

        print_timings = eval(data['print_timings'])

        del(data['rs'])
        del(data['Z'])
        del(data['N'])
        del(data['functionals'])

        for entry in data:
            data[entry]=eval(data[entry])
        ofdftradial = pydefuse.OfdftRadial(self, rs, Z, N, functionals, **data):
        ofdftradial.run()
        ofdftradial.calculate_energies()

        if print_timings:
            pydefuse.chronicle.printall()
        
    print ("=====================================================================")
    print ("======== PyDeFuSE stops",time.strftime("%c"))
    print ("=====================================================================")    
        
if __name__ == "__main__":
    main()
    
